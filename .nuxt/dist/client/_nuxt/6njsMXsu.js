import{$ as C,k as O,r as l}from"./AkD5g4Ve.js";function J(){const o=C().public.apiBaseUrl,{isAuthenticated:u,getAuthHeader:n}=O(),t=l(!1),a=l(null);async function c(){t.value=!0,a.value=null;try{const e=await fetch(`${o}/api/phrases`);if(!e.ok)throw new Error(`API error: ${e.status}`);return await e.json()}catch(e){return a.value=e.message||"Failed to fetch phrase",console.error("Error fetching phrase:",e),{text:"The quick brown fox jumps over the lazy dog."}}finally{t.value=!1}}async function f(e){t.value=!0,a.value=null;try{const r=u.value?"/api/scores":"/api/scores/anonymous",s={"Content-Type":"application/json",...n()},i=await fetch(`${o}${r}`,{method:"POST",headers:s,body:JSON.stringify(e)});if(!i.ok)throw new Error(`API error: ${i.status}`);return await i.json()}catch(r){return a.value=r.message||"Failed to save score",console.error("Error saving score:",r),null}finally{t.value=!1}}async function h(){t.value=!0,a.value=null;try{const e=await fetch(`${o}/api/scores`);if(!e.ok)throw new Error(`API error: ${e.status}`);return await e.json()}catch(e){return a.value=e.message||"Failed to fetch top scores",console.error("Error fetching top scores:",e),[]}finally{t.value=!1}}async function p(){t.value=!0,a.value=null;try{const e=await fetch(`${o}/api/scores/all-with-users`);if(!e.ok)throw new Error(`API error: ${e.status}`);return await e.json()}catch(e){return a.value=e.message||"Failed to fetch scores with user data",console.error("Error fetching scores with user data:",e),[]}finally{t.value=!1}}async function d(){t.value=!0,a.value=null;try{const e=await fetch(`${o}/api/scores/user`,{headers:n()});if(!e.ok)throw new Error(`API error: ${e.status}`);return await e.json()}catch(e){return a.value=e.message||"Failed to fetch user scores",console.error("Error fetching user scores:",e),[]}finally{t.value=!1}}async function w(){t.value=!0,a.value=null;try{const e=await fetch(`${o}/api/scores/stats`,{headers:n()});if(!e.ok)throw new Error(`API error: ${e.status}`);return await e.json()}catch(e){return a.value=e.message||"Failed to fetch user statistics",console.error("Error fetching user statistics:",e),null}finally{t.value=!1}}async function v(){t.value=!0,a.value=null;try{const e=await fetch(`${o}/api/users/profile`,{headers:n()});if(!e.ok)throw new Error(`API error: ${e.status}`);return await e.json()}catch(e){return a.value=e.message||"Failed to fetch user profile",console.error("Error fetching user profile:",e),null}finally{t.value=!1}}async function y(e){t.value=!0,a.value=null;try{const r=await fetch(`${o}/api/users/profile`,{method:"PUT",headers:{"Content-Type":"application/json",...n()},body:JSON.stringify(e)});if(!r.ok){const s=await r.json();throw new Error(s.message||`API error: ${r.status}`)}return await r.json()}catch(r){return a.value=r.message||"Failed to update user profile",console.error("Error updating user profile:",r),null}finally{t.value=!1}}async function g(e){t.value=!0,a.value=null;try{const r=await fetch(`${o}/api/users/profile-picture`,{method:"PUT",headers:{"Content-Type":"application/json",...n()},body:JSON.stringify({profilePicture:e})});if(!r.ok){const s=await r.json();throw new Error(s.message||`API error: ${r.status}`)}return await r.json()}catch(r){return a.value=r.message||"Failed to update profile picture",console.error("Error updating profile picture:",r),null}finally{t.value=!1}}async function m(e){t.value=!0,a.value=null;try{const r=new FormData;r.append("profilePicture",e);const s=await fetch(`${o}/api/users/profile-picture/upload`,{method:"POST",headers:{...n()},body:r});if(!s.ok){const i=await s.json();throw new Error(i.message||`API error: ${s.status}`)}return await s.json()}catch(r){return a.value=r.message||"Failed to upload profile picture",console.error("Error uploading profile picture:",r),null}finally{t.value=!1}}async function $(e){t.value=!0,a.value=null;try{const r=await fetch(`${o}/api/users/change-password`,{method:"PUT",headers:{"Content-Type":"application/json",...n()},body:JSON.stringify(e)});if(!r.ok){const s=await r.json();throw new Error(s.message||`API error: ${r.status}`)}return await r.json()}catch(r){return a.value=r.message||"Failed to change password",console.error("Error changing password:",r),null}finally{t.value=!1}}function P(e){const r="/faviconTyping.png";return typeof e=="string"?e?`${o}/api/users/profile-picture/${e}`:r:!e||typeof e!="object"?r:e.profilePicture&&e.profilePicture.fileId?e._id?`${o}/api/users/profile-picture/${e._id}`:r:typeof e.profilePicture=="string"&&(e.profilePicture.startsWith("http")||e.profilePicture.startsWith("data:"))?e.profilePicture:r}async function E(){t.value=!0,a.value=null;try{const e=await fetch(`${o}/api/friends`,{headers:n()});if(!e.ok)throw new Error(`API error: ${e.status}`);return await e.json()}catch(e){return a.value=e.message||"Failed to fetch friends list",console.error("Error fetching friends list:",e),[]}finally{t.value=!1}}async function j(){t.value=!0,a.value=null;try{const e=await fetch(`${o}/api/friends/requests`,{headers:n()});if(!e.ok)throw new Error(`API error: ${e.status}`);return await e.json()}catch(e){return a.value=e.message||"Failed to fetch friend requests",console.error("Error fetching friend requests:",e),{received:[],sent:[]}}finally{t.value=!1}}async function A(e){t.value=!0,a.value=null;try{const r=await fetch(`${o}/api/friends/requests`,{method:"POST",headers:{"Content-Type":"application/json",...n()},body:JSON.stringify({receiverId:e})});if(!r.ok){const s=await r.json();throw new Error(s.message||`API error: ${r.status}`)}return await r.json()}catch(r){return a.value=r.message||"Failed to send friend request",console.error("Error sending friend request:",r),null}finally{t.value=!1}}async function F(e,r){t.value=!0,a.value=null;try{const s=await fetch(`${o}/api/friends/requests/${e}`,{method:"PUT",headers:{"Content-Type":"application/json",...n()},body:JSON.stringify({accept:r})});if(!s.ok){const i=await s.json();throw new Error(i.message||`API error: ${s.status}`)}return await s.json()}catch(s){return a.value=s.message||"Failed to respond to friend request",console.error("Error responding to friend request:",s),null}finally{t.value=!1}}async function k(e){t.value=!0,a.value=null;try{const r=await fetch(`${o}/api/friends/search?query=${encodeURIComponent(e)}`,{headers:n()});if(!r.ok)throw new Error(`API error: ${r.status}`);return await r.json()}catch(r){return a.value=r.message||"Failed to search users",console.error("Error searching users:",r),[]}finally{t.value=!1}}async function I(e){t.value=!0,a.value=null;try{const r=await fetch(`${o}/api/friends/${e}`,{method:"DELETE",headers:n()});if(!r.ok){const s=await r.json();throw new Error(s.message||`API error: ${r.status}`)}return await r.json()}catch(r){return a.value=r.message||"Failed to remove friend",console.error("Error removing friend:",r),null}finally{t.value=!1}}async function T(e){t.value=!0,a.value=null;try{const r=await fetch(`${o}/api/chat/messages/${e}`,{headers:n()});if(!r.ok)throw new Error(`API error: ${r.status}`);return await r.json()}catch(r){return a.value=r.message||"Failed to fetch chat messages",console.error("Error fetching chat messages:",r),[]}finally{t.value=!1}}async function S(){t.value=!0,a.value=null;try{const e=await fetch(`${o}/api/chat/conversations`,{headers:n()});if(!e.ok)throw new Error(`API error: ${e.status}`);return await e.json()}catch(e){return a.value=e.message||"Failed to fetch conversations",console.error("Error fetching conversations:",e),[]}finally{t.value=!1}}async function U(e,r){t.value=!0,a.value=null;try{const s=await fetch(`${o}/api/chat/messages`,{method:"POST",headers:{"Content-Type":"application/json",...n()},body:JSON.stringify({receiverId:e,content:r})});if(!s.ok){const i=await s.json();throw new Error(i.message||`API error: ${s.status}`)}return await s.json()}catch(s){return a.value=s.message||"Failed to send message",console.error("Error sending message:",s),null}finally{t.value=!1}}async function q(){t.value=!0,a.value=null;try{const e=await fetch(`${o}/api/chat/notifications`,{headers:n()});if(!e.ok)throw new Error(`API error: ${e.status}`);return await e.json()}catch(e){return a.value=e.message||"Failed to fetch notifications",console.error("Error fetching notifications:",e),[]}finally{t.value=!1}}async function b(){t.value=!0,a.value=null;try{const e=await fetch(`${o}/api/chat/notifications/read`,{method:"PUT",headers:n()});if(!e.ok)throw new Error(`API error: ${e.status}`);return await e.json()}catch(e){return a.value=e.message||"Failed to mark notifications as read",console.error("Error marking notifications as read:",e),null}finally{t.value=!1}}return{loading:t,error:a,getRandomPhrase:c,saveScore:f,getTopScores:h,getAllScoresWithUsers:p,getUserScores:d,getUserStats:w,getUserProfile:v,updateUserProfile:y,updateProfilePicture:g,uploadProfilePicture:m,changePassword:$,getProfilePictureUrl:P,getFriendsList:E,getFriendRequests:j,sendFriendRequest:A,respondToFriendRequest:F,searchUsers:k,removeFriend:I,getChatMessages:T,getConversations:S,sendMessage:U,getNotifications:q,markNotificationsAsRead:b}}export{J as u};
