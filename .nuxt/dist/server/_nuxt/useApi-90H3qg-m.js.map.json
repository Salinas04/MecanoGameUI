{"file":"useApi-90H3qg-m.js","mappings":"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","names":[],"sources":["../../../../composables/useApi.js"],"sourcesContent":["import { ref } from 'vue';\r\nimport { useAuth } from './useAuth';\r\nimport { useRuntimeConfig } from 'nuxt/app';\r\n\r\nexport function useApi() {\r\n  const config = useRuntimeConfig();\r\n  const baseUrl = config.public.apiBaseUrl;\r\n  const { isAuthenticated, getAuthHeader } = useAuth();\r\n\r\n  const loading = ref(false);\r\n  const error = ref(null);\r\n\r\n  // Get a random phrase\r\n  async function getRandomPhrase() {\r\n    loading.value = true;\r\n    error.value = null;\r\n\r\n    try {\r\n      const response = await fetch(`${baseUrl}/api/phrases`);\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`API error: ${response.status}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n      return data;\r\n    } catch (err) {\r\n      error.value = err.message || 'Failed to fetch phrase';\r\n      console.error('Error fetching phrase:', err);\r\n\r\n      // Return a default phrase if API call fails\r\n      return { text: \"The quick brown fox jumps over the lazy dog.\" };\r\n    } finally {\r\n      loading.value = false;\r\n    }\r\n  }\r\n\r\n  // Save a score (handles both authenticated and anonymous)\r\n  async function saveScore(scoreData) {\r\n    loading.value = true;\r\n    error.value = null;\r\n\r\n    try {\r\n      // Determine endpoint based on authentication status\r\n      const endpoint = isAuthenticated.value ? '/api/scores' : '/api/scores/anonymous';\r\n\r\n      // Set up headers\r\n      const headers = {\r\n        'Content-Type': 'application/json',\r\n        ...getAuthHeader()\r\n      };\r\n\r\n      const response = await fetch(`${baseUrl}${endpoint}`, {\r\n        method: 'POST',\r\n        headers,\r\n        body: JSON.stringify(scoreData)\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`API error: ${response.status}`);\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (err) {\r\n      error.value = err.message || 'Failed to save score';\r\n      console.error('Error saving score:', err);\r\n      return null;\r\n    } finally {\r\n      loading.value = false;\r\n    }\r\n  }\r\n\r\n  // Get top scores\r\n  async function getTopScores() {\r\n    loading.value = true;\r\n    error.value = null;\r\n\r\n    try {\r\n      const response = await fetch(`${baseUrl}/api/scores`);\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`API error: ${response.status}`);\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (err) {\r\n      error.value = err.message || 'Failed to fetch top scores';\r\n      console.error('Error fetching top scores:', err);\r\n      return [];\r\n    } finally {\r\n      loading.value = false;\r\n    }\r\n  }\r\n\r\n  // Get all scores with user data\r\n  async function getAllScoresWithUsers() {\r\n    loading.value = true;\r\n    error.value = null;\r\n\r\n    try {\r\n      const response = await fetch(`${baseUrl}/api/scores/all-with-users`);\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`API error: ${response.status}`);\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (err) {\r\n      error.value = err.message || 'Failed to fetch scores with user data';\r\n      console.error('Error fetching scores with user data:', err);\r\n      return [];\r\n    } finally {\r\n      loading.value = false;\r\n    }\r\n  }\r\n\r\n  // Get user scores (authenticated only)\r\n  async function getUserScores() {\r\n    loading.value = true;\r\n    error.value = null;\r\n\r\n    try {\r\n      const response = await fetch(`${baseUrl}/api/scores/user`, {\r\n        headers: getAuthHeader()\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`API error: ${response.status}`);\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (err) {\r\n      error.value = err.message || 'Failed to fetch user scores';\r\n      console.error('Error fetching user scores:', err);\r\n      return [];\r\n    } finally {\r\n      loading.value = false;\r\n    }\r\n  }\r\n\r\n  // Get user statistics (authenticated only)\r\n  async function getUserStats() {\r\n    loading.value = true;\r\n    error.value = null;\r\n\r\n    try {\r\n      const response = await fetch(`${baseUrl}/api/scores/stats`, {\r\n        headers: getAuthHeader()\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`API error: ${response.status}`);\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (err) {\r\n      error.value = err.message || 'Failed to fetch user statistics';\r\n      console.error('Error fetching user statistics:', err);\r\n      return null;\r\n    } finally {\r\n      loading.value = false;\r\n    }\r\n  }\r\n\r\n  // Get user profile (authenticated only)\r\n  async function getUserProfile() {\r\n    loading.value = true;\r\n    error.value = null;\r\n\r\n    try {\r\n      const response = await fetch(`${baseUrl}/api/users/profile`, {\r\n        headers: getAuthHeader()\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`API error: ${response.status}`);\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (err) {\r\n      error.value = err.message || 'Failed to fetch user profile';\r\n      console.error('Error fetching user profile:', err);\r\n      return null;\r\n    } finally {\r\n      loading.value = false;\r\n    }\r\n  }\r\n\r\n  // Update user profile (authenticated only)\r\n  async function updateUserProfile(profileData) {\r\n    loading.value = true;\r\n    error.value = null;\r\n\r\n    try {\r\n      const response = await fetch(`${baseUrl}/api/users/profile`, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          ...getAuthHeader()\r\n        },\r\n        body: JSON.stringify(profileData)\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const data = await response.json();\r\n        throw new Error(data.message || `API error: ${response.status}`);\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (err) {\r\n      error.value = err.message || 'Failed to update user profile';\r\n      console.error('Error updating user profile:', err);\r\n      return null;\r\n    } finally {\r\n      loading.value = false;\r\n    }\r\n  }\r\n\r\n  // Update profile picture with URL (authenticated only)\r\n  async function updateProfilePicture(profilePictureUrl) {\r\n    loading.value = true;\r\n    error.value = null;\r\n\r\n    try {\r\n      const response = await fetch(`${baseUrl}/api/users/profile-picture`, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          ...getAuthHeader()\r\n        },\r\n        body: JSON.stringify({ profilePicture: profilePictureUrl })\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const data = await response.json();\r\n        throw new Error(data.message || `API error: ${response.status}`);\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (err) {\r\n      error.value = err.message || 'Failed to update profile picture';\r\n      console.error('Error updating profile picture:', err);\r\n      return null;\r\n    } finally {\r\n      loading.value = false;\r\n    }\r\n  }\r\n\r\n  // Upload profile picture file (authenticated only)\r\n  async function uploadProfilePicture(file) {\r\n    loading.value = true;\r\n    error.value = null;\r\n\r\n    try {\r\n      // Create FormData object to send the file\r\n      const formData = new FormData();\r\n      formData.append('profilePicture', file);\r\n\r\n      const response = await fetch(`${baseUrl}/api/users/profile-picture/upload`, {\r\n        method: 'POST',\r\n        headers: {\r\n          ...getAuthHeader()\r\n          // Don't set Content-Type header, it will be set automatically with boundary\r\n        },\r\n        body: formData\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const data = await response.json();\r\n        throw new Error(data.message || `API error: ${response.status}`);\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (err) {\r\n      error.value = err.message || 'Failed to upload profile picture';\r\n      console.error('Error uploading profile picture:', err);\r\n      return null;\r\n    } finally {\r\n      loading.value = false;\r\n    }\r\n  }\r\n\r\n  // Change password (authenticated only)\r\n  async function changePassword(passwordData) {\r\n    loading.value = true;\r\n    error.value = null;\r\n\r\n    try {\r\n      const response = await fetch(`${baseUrl}/api/users/change-password`, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          ...getAuthHeader()\r\n        },\r\n        body: JSON.stringify(passwordData)\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const data = await response.json();\r\n        throw new Error(data.message || `API error: ${response.status}`);\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (err) {\r\n      error.value = err.message || 'Failed to change password';\r\n      console.error('Error changing password:', err);\r\n      return null;\r\n    } finally {\r\n      loading.value = false;\r\n    }\r\n  }\r\n\r\n  // Get profile picture URL\r\n  function getProfilePictureUrl(user) {\r\n    const DEFAULT_AVATAR = '/faviconTyping.png'; // Use faviconTyping.png as default avatar\r\n\r\n    // If user is a string (userId), construct URL directly\r\n    if (typeof user === 'string') {\r\n      // Check if user ID is undefined or empty\r\n      if (!user) return DEFAULT_AVATAR;\r\n      return `${baseUrl}/api/users/profile-picture/${user}`;\r\n    }\r\n\r\n    // If user is not provided or not an object\r\n    if (!user || typeof user !== 'object') return DEFAULT_AVATAR;\r\n\r\n    // If user has profilePicture with fileId\r\n    if (user.profilePicture && user.profilePicture.fileId) {\r\n      // Check if user ID is undefined or empty\r\n      if (!user._id) return DEFAULT_AVATAR;\r\n      return `${baseUrl}/api/users/profile-picture/${user._id}`;\r\n    }\r\n\r\n    // If profilePicture is a string (external URL)\r\n    if (typeof user.profilePicture === 'string') {\r\n      // If it's already a full URL, return it\r\n      if (user.profilePicture.startsWith('http') || user.profilePicture.startsWith('data:')) {\r\n        return user.profilePicture;\r\n      }\r\n    }\r\n\r\n    return DEFAULT_AVATAR;\r\n  }\r\n\r\n\r\n\r\n  // Friend-related API functions\r\n  async function getFriendsList() {\r\n    loading.value = true;\r\n    error.value = null;\r\n\r\n    try {\r\n      const response = await fetch(`${baseUrl}/api/friends`, {\r\n        headers: getAuthHeader()\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`API error: ${response.status}`);\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (err) {\r\n      error.value = err.message || 'Failed to fetch friends list';\r\n      console.error('Error fetching friends list:', err);\r\n      return [];\r\n    } finally {\r\n      loading.value = false;\r\n    }\r\n  }\r\n\r\n  async function getFriendRequests() {\r\n    loading.value = true;\r\n    error.value = null;\r\n\r\n    try {\r\n      const response = await fetch(`${baseUrl}/api/friends/requests`, {\r\n        headers: getAuthHeader()\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`API error: ${response.status}`);\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (err) {\r\n      error.value = err.message || 'Failed to fetch friend requests';\r\n      console.error('Error fetching friend requests:', err);\r\n      return { received: [], sent: [] };\r\n    } finally {\r\n      loading.value = false;\r\n    }\r\n  }\r\n\r\n  async function sendFriendRequest(receiverId) {\r\n    loading.value = true;\r\n    error.value = null;\r\n\r\n    try {\r\n      const response = await fetch(`${baseUrl}/api/friends/requests`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          ...getAuthHeader()\r\n        },\r\n        body: JSON.stringify({ receiverId })\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const data = await response.json();\r\n        throw new Error(data.message || `API error: ${response.status}`);\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (err) {\r\n      error.value = err.message || 'Failed to send friend request';\r\n      console.error('Error sending friend request:', err);\r\n      return null;\r\n    } finally {\r\n      loading.value = false;\r\n    }\r\n  }\r\n\r\n  async function respondToFriendRequest(requestId, accept) {\r\n    loading.value = true;\r\n    error.value = null;\r\n\r\n    try {\r\n      const response = await fetch(`${baseUrl}/api/friends/requests/${requestId}`, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          ...getAuthHeader()\r\n        },\r\n        body: JSON.stringify({ accept })\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const data = await response.json();\r\n        throw new Error(data.message || `API error: ${response.status}`);\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (err) {\r\n      error.value = err.message || 'Failed to respond to friend request';\r\n      console.error('Error responding to friend request:', err);\r\n      return null;\r\n    } finally {\r\n      loading.value = false;\r\n    }\r\n  }\r\n\r\n  async function searchUsers(query) {\r\n    loading.value = true;\r\n    error.value = null;\r\n\r\n    try {\r\n      const response = await fetch(`${baseUrl}/api/friends/search?query=${encodeURIComponent(query)}`, {\r\n        headers: getAuthHeader()\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`API error: ${response.status}`);\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (err) {\r\n      error.value = err.message || 'Failed to search users';\r\n      console.error('Error searching users:', err);\r\n      return [];\r\n    } finally {\r\n      loading.value = false;\r\n    }\r\n  }\r\n\r\n  async function removeFriend(friendId) {\r\n    loading.value = true;\r\n    error.value = null;\r\n\r\n    try {\r\n      const response = await fetch(`${baseUrl}/api/friends/${friendId}`, {\r\n        method: 'DELETE',\r\n        headers: getAuthHeader()\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const data = await response.json();\r\n        throw new Error(data.message || `API error: ${response.status}`);\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (err) {\r\n      error.value = err.message || 'Failed to remove friend';\r\n      console.error('Error removing friend:', err);\r\n      return null;\r\n    } finally {\r\n      loading.value = false;\r\n    }\r\n  }\r\n\r\n  // Chat-related API functions\r\n  async function getChatMessages(userId) {\r\n    loading.value = true;\r\n    error.value = null;\r\n\r\n    try {\r\n      const response = await fetch(`${baseUrl}/api/chat/messages/${userId}`, {\r\n        headers: getAuthHeader()\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`API error: ${response.status}`);\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (err) {\r\n      error.value = err.message || 'Failed to fetch chat messages';\r\n      console.error('Error fetching chat messages:', err);\r\n      return [];\r\n    } finally {\r\n      loading.value = false;\r\n    }\r\n  }\r\n\r\n  async function getConversations() {\r\n    loading.value = true;\r\n    error.value = null;\r\n\r\n    try {\r\n      const response = await fetch(`${baseUrl}/api/chat/conversations`, {\r\n        headers: getAuthHeader()\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`API error: ${response.status}`);\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (err) {\r\n      error.value = err.message || 'Failed to fetch conversations';\r\n      console.error('Error fetching conversations:', err);\r\n      return [];\r\n    } finally {\r\n      loading.value = false;\r\n    }\r\n  }\r\n\r\n  async function sendMessage(receiverId, content) {\r\n    loading.value = true;\r\n    error.value = null;\r\n\r\n    try {\r\n      const response = await fetch(`${baseUrl}/api/chat/messages`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          ...getAuthHeader()\r\n        },\r\n        body: JSON.stringify({ receiverId, content })\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const data = await response.json();\r\n        throw new Error(data.message || `API error: ${response.status}`);\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (err) {\r\n      error.value = err.message || 'Failed to send message';\r\n      console.error('Error sending message:', err);\r\n      return null;\r\n    } finally {\r\n      loading.value = false;\r\n    }\r\n  }\r\n\r\n  // Notification-related API functions\r\n  async function getNotifications() {\r\n    loading.value = true;\r\n    error.value = null;\r\n\r\n    try {\r\n      const response = await fetch(`${baseUrl}/api/chat/notifications`, {\r\n        headers: getAuthHeader()\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`API error: ${response.status}`);\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (err) {\r\n      error.value = err.message || 'Failed to fetch notifications';\r\n      console.error('Error fetching notifications:', err);\r\n      return [];\r\n    } finally {\r\n      loading.value = false;\r\n    }\r\n  }\r\n\r\n  async function markNotificationsAsRead() {\r\n    loading.value = true;\r\n    error.value = null;\r\n\r\n    try {\r\n      const response = await fetch(`${baseUrl}/api/chat/notifications/read`, {\r\n        method: 'PUT',\r\n        headers: getAuthHeader()\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`API error: ${response.status}`);\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (err) {\r\n      error.value = err.message || 'Failed to mark notifications as read';\r\n      console.error('Error marking notifications as read:', err);\r\n      return null;\r\n    } finally {\r\n      loading.value = false;\r\n    }\r\n  }\r\n\r\n  return {\r\n    loading,\r\n    error,\r\n    // Game and score functions\r\n    getRandomPhrase,\r\n    saveScore,\r\n    getTopScores,\r\n    getAllScoresWithUsers,\r\n    getUserScores,\r\n    getUserStats,\r\n    // User profile functions\r\n    getUserProfile,\r\n    updateUserProfile,\r\n    updateProfilePicture,\r\n    uploadProfilePicture,\r\n    changePassword,\r\n    getProfilePictureUrl,\r\n    // Friend functions\r\n    getFriendsList,\r\n    getFriendRequests,\r\n    sendFriendRequest,\r\n    respondToFriendRequest,\r\n    searchUsers,\r\n    removeFriend,\r\n    // Chat functions\r\n    getChatMessages,\r\n    getConversations,\r\n    sendMessage,\r\n    // Notification functions\r\n    getNotifications,\r\n    markNotificationsAsRead\r\n  };\r\n}\r\n"],"version":3}