{"file":"index-CxE1Z2Up.js","mappings":"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","names":["startTimer","_ssrRenderAttrs","_mergeProps","_ssrRenderList","_unref"],"sources":["../../../../node_modules/nuxt/dist/app/compat/interval.js","../../../../composables/useTypingGame.js","../../../../pages/index.vue"],"sourcesContent":["import { createError } from \"../composables/error.js\";\nconst intervalError = \"[nuxt] `setInterval` should not be used on the server. Consider wrapping it with an `onNuxtReady`, `onBeforeMount` or `onMounted` lifecycle hook, or ensure you only call it in the browser by checking `import.meta.client`.\";\nexport const setInterval = import.meta.client ? window.setInterval : () => {\n  if (import.meta.dev) {\n    throw createError({\n      statusCode: 500,\n      message: intervalError\n    });\n  }\n  console.error(intervalError);\n};\n","import { ref, computed, watch } from 'vue';\r\n\r\nexport function useTypingGame() {\r\n  // Game state\r\n  const phrase = ref('');\r\n  const userInput = ref('');\r\n  const isGameActive = ref(false);\r\n  const isGameComplete = ref(false);\r\n  const startTime = ref(null);\r\n  const endTime = ref(null);\r\n  const errors = ref(0);\r\n  const bestScore = ref(null);\r\n  const completedPhrases = ref(0);\r\n  const totalCharactersTyped = ref(0);\r\n  const totalErrors = ref(0);\r\n  const timeRemaining = ref(120); // 2 minutes in seconds\r\n  const timerInterval = ref(null);\r\n  \r\n  // Callback for phrase completion\r\n  const onPhraseCompleted = ref(null);\r\n\r\n  // Load best score from localStorage\r\n  if (process.client) {\r\n    const savedBestScore = localStorage.getItem('bestScore');\r\n    if (savedBestScore) {\r\n      bestScore.value = JSON.parse(savedBestScore);\r\n    }\r\n  }\r\n\r\n  // Set the current phrase\r\n  function setPhrase(newPhrase) {\r\n    phrase.value = newPhrase;\r\n    userInput.value = '';\r\n  }\r\n\r\n  // Reset the game state\r\n  function resetGame() {\r\n    userInput.value = '';\r\n    isGameActive.value = false;\r\n    isGameComplete.value = false;\r\n    startTime.value = null;\r\n    endTime.value = null;\r\n    errors.value = 0;\r\n    completedPhrases.value = 0;\r\n    totalCharactersTyped.value = 0;\r\n    totalErrors.value = 0;\r\n    timeRemaining.value = 120; // Reset to 2 minutes\r\n\r\n    // Clear any existing timer\r\n    if (timerInterval.value) {\r\n      clearInterval(timerInterval.value);\r\n      timerInterval.value = null;\r\n    }\r\n  }\r\n\r\n  // Start the game timer\r\n  function startTimer() {\r\n    if (!isGameActive.value && !isGameComplete.value) {\r\n      startTime.value = new Date();\r\n      isGameActive.value = true;\r\n\r\n      // Start the countdown timer\r\n      timerInterval.value = setInterval(() => {\r\n        if (timeRemaining.value > 0) {\r\n          timeRemaining.value--;\r\n        } else {\r\n          endGame();\r\n        }\r\n      }, 1000);\r\n    }\r\n  }\r\n\r\n  // End the game\r\n  function endGame() {\r\n    if (isGameActive.value) {\r\n      endTime.value = new Date();\r\n      isGameActive.value = false;\r\n      isGameComplete.value = true;\r\n\r\n      // Clear the timer\r\n      if (timerInterval.value) {\r\n        clearInterval(timerInterval.value);\r\n        timerInterval.value = null;\r\n      }\r\n\r\n      // Save best score if current score is better\r\n      if (process.client && wpm.value > 0) {\r\n        const currentScore = {\r\n          wpm: wpm.value,\r\n          accuracy: accuracy.value,\r\n          errors: totalErrors.value,\r\n          completedPhrases: completedPhrases.value,\r\n          date: new Date().toISOString()\r\n        };\r\n\r\n        // Calculate a score based on WPM and accuracy\r\n        const calculatedScore = wpm.value * (accuracy.value / 100);\r\n\r\n        if (!bestScore.value || calculatedScore > (bestScore.value.wpm * (bestScore.value.accuracy / 100))) {\r\n          bestScore.value = currentScore;\r\n          localStorage.setItem('bestScore', JSON.stringify(currentScore));\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // Complete the current phrase and move to the next one\r\n  function completePhrase() {\r\n    // Update stats for the completed phrase\r\n    completedPhrases.value++;\r\n    totalCharactersTyped.value += phrase.value.length;\r\n    totalErrors.value += errors.value;\r\n\r\n    // Reset for the next phrase\r\n    errors.value = 0;\r\n    userInput.value = '';\r\n\r\n    // Call the onPhraseCompleted callback if it exists\r\n    if (onPhraseCompleted.value && typeof onPhraseCompleted.value === 'function') {\r\n      onPhraseCompleted.value();\r\n    }\r\n  }\r\n\r\n  // Calculate words per minute\r\n  const wpm = computed(() => {\r\n    if (!startTime.value || (!endTime.value && !isGameActive.value)) {\r\n      return 0;\r\n    }\r\n\r\n    const timeElapsed = endTime.value \r\n      ? (endTime.value - startTime.value) / 1000 / 60 // minutes\r\n      : (new Date() - startTime.value) / 1000 / 60; // minutes\r\n\r\n    // Standard: 5 characters = 1 word\r\n    const wordCount = totalCharactersTyped.value / 5;\r\n\r\n    return Math.round(wordCount / timeElapsed);\r\n  });\r\n\r\n  // Calculate accuracy percentage\r\n  const accuracy = computed(() => {\r\n    if (totalCharactersTyped.value === 0) {\r\n      return 100;\r\n    }\r\n\r\n    const correctChars = totalCharactersTyped.value - totalErrors.value;\r\n    return Math.round((correctChars / totalCharactersTyped.value) * 100);\r\n  });\r\n\r\n  // Format time remaining as MM:SS\r\n  const formattedTimeRemaining = computed(() => {\r\n    const minutes = Math.floor(timeRemaining.value / 60);\r\n    const seconds = timeRemaining.value % 60;\r\n    return `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\r\n  });\r\n\r\n  // Get character status for display\r\n  const charStatus = computed(() => {\r\n    return phrase.value.split('').map((char, index) => {\r\n      if (index >= userInput.value.length) {\r\n        return 'pending'; // Not typed yet\r\n      } else if (char === userInput.value[index]) {\r\n        return 'correct'; // Correctly typed\r\n      } else {\r\n        return 'incorrect'; // Incorrectly typed\r\n      }\r\n    });\r\n  });\r\n\r\n  // Watch user input to track game progress\r\n  watch(userInput, (newValue, oldValue) => {\r\n    // Start timer on first character\r\n    if (newValue.length === 1 && oldValue.length === 0 && !isGameActive.value) {\r\n      startTimer();\r\n    }\r\n\r\n    // Count errors\r\n    if (newValue.length > oldValue.length) {\r\n      const lastCharIndex = newValue.length - 1;\r\n      if (lastCharIndex < phrase.value.length && \r\n          newValue[lastCharIndex] !== phrase.value[lastCharIndex]) {\r\n        errors.value++;\r\n      }\r\n    }\r\n\r\n    // Complete phrase when it's finished\r\n    if (newValue.length === phrase.value.length) {\r\n      completePhrase();\r\n    }\r\n  });\r\n\r\n  return {\r\n    phrase,\r\n    userInput,\r\n    isGameActive,\r\n    isGameComplete,\r\n    errors,\r\n    wpm,\r\n    accuracy,\r\n    charStatus,\r\n    bestScore,\r\n    completedPhrases,\r\n    totalErrors,\r\n    timeRemaining,\r\n    formattedTimeRemaining,\r\n    setPhrase,\r\n    resetGame,\r\n    startTimer,\r\n    endGame,\r\n    completePhrase,\r\n    onPhraseCompleted\r\n  };\r\n}\r\n","<template>\r\n  <div class=\"max-w-3xl mx-auto\">\r\n    <div \r\n      class=\"text-center mb-8\"\r\n      v-motion\r\n      :initial=\"{ opacity: 0, y: -20 }\"\r\n      :enter=\"{ opacity: 1, y: 0, transition: { duration: 500 } }\"\r\n    >\r\n      <h1 class=\"text-3xl font-bold text-gray-800 dark:text-white mb-2\">TypingRush</h1>\r\n      <p class=\"text-gray-600 dark:text-gray-300\">Improve your typing speed and accuracy</p>\r\n    </div>\r\n\r\n    <!-- Game Container -->\r\n    <div \r\n      class=\"bg-white dark:bg-gray-800 rounded-2xl shadow-md border border-gray-200 dark:border-gray-700 p-6 mb-6 relative overflow-hidden\"\r\n      v-motion\r\n      :initial=\"{ opacity: 0, scale: 0.9 }\"\r\n      :enter=\"{ opacity: 1, scale: 1, transition: { duration: 500, delay: 200 } }\"\r\n    >\r\n\r\n      <!-- Phrase Display -->\r\n      <div class=\"mb-6 p-4 bg-gray-50 dark:bg-gray-700 rounded-xl border border-gray-200 dark:border-gray-600 mono text-lg leading-relaxed\">\r\n        <span \r\n          v-for=\"(char, index) in phrase.split('')\" \r\n          :key=\"index\"\r\n          :class=\"{\r\n            'text-green-500': charStatus[index] === 'correct',\r\n            'text-red-500': charStatus[index] === 'incorrect',\r\n            'text-gray-500 dark:text-gray-400': charStatus[index] === 'pending'\r\n          }\"\r\n        >{{ char }}</span>\r\n      </div>\r\n\r\n      <!-- Input Field -->\r\n      <div class=\"mb-6\">\r\n        <input\r\n          v-model=\"userInput\"\r\n          type=\"text\"\r\n          :disabled=\"isGameComplete\"\r\n          class=\"w-full p-4 border border-gray-300 dark:border-gray-600 rounded-xl bg-white dark:bg-gray-700 text-gray-800 dark:text-white mono focus:outline-none focus:ring-2 focus:ring-primary-500\"\r\n          :class=\"{ 'opacity-50': isGameComplete }\"\r\n          placeholder=\"Start typing here...\"\r\n          autocomplete=\"off\"\r\n          autocorrect=\"off\"\r\n          autocapitalize=\"off\"\r\n          spellcheck=\"false\"\r\n          @copy.prevent\r\n          @cut.prevent\r\n          @paste.prevent\r\n          onpaste=\"return false\"\r\n        />\r\n      </div>\r\n\r\n      <!-- Timer Display -->\r\n      <div \r\n        class=\"mb-4 p-4 bg-gray-50 dark:bg-gray-700 rounded-xl border border-gray-200 dark:border-gray-600 text-center\"\r\n        v-motion\r\n        :initial=\"{ opacity: 0, y: -20 }\"\r\n        :enter=\"{ opacity: 1, y: 0, transition: { duration: 500, delay: 200 } }\"\r\n      >\r\n        <div class=\"text-3xl font-bold\" :class=\"timeRemaining < 30 ? 'text-red-500' : 'text-primary-600 dark:text-primary-400'\">\r\n          {{ formattedTimeRemaining }}\r\n        </div>\r\n        <div class=\"text-sm text-gray-600 dark:text-gray-400\">Time Remaining</div>\r\n      </div>\r\n\r\n      <!-- Stats Display -->\r\n      <div class=\"grid grid-cols-4 gap-4 mb-6\">\r\n        <div \r\n          class=\"bg-gray-50 dark:bg-gray-700 p-4 rounded-xl border border-gray-200 dark:border-gray-600 text-center\"\r\n          v-motion\r\n          :initial=\"{ opacity: 0, x: -20 }\"\r\n          :enter=\"{ opacity: 1, x: 0, transition: { duration: 500, delay: 300 } }\"\r\n        >\r\n          <div class=\"text-2xl font-bold text-primary-600 dark:text-primary-400\">{{ wpm }}</div>\r\n          <div class=\"text-sm text-gray-600 dark:text-gray-400\">WPM</div>\r\n        </div>\r\n        <div \r\n          class=\"bg-gray-50 dark:bg-gray-700 p-4 rounded-xl border border-gray-200 dark:border-gray-600 text-center\"\r\n          v-motion\r\n          :initial=\"{ opacity: 0, y: 20 }\"\r\n          :enter=\"{ opacity: 1, y: 0, transition: { duration: 500, delay: 400 } }\"\r\n        >\r\n          <div class=\"text-2xl font-bold text-primary-600 dark:text-primary-400\">{{ accuracy }}%</div>\r\n          <div class=\"text-sm text-gray-600 dark:text-gray-400\">Accuracy</div>\r\n        </div>\r\n        <div \r\n          class=\"bg-gray-50 dark:bg-gray-700 p-4 rounded-xl border border-gray-200 dark:border-gray-600 text-center\"\r\n          v-motion\r\n          :initial=\"{ opacity: 0, x: 20 }\"\r\n          :enter=\"{ opacity: 1, x: 0, transition: { duration: 500, delay: 500 } }\"\r\n        >\r\n          <div class=\"text-2xl font-bold text-primary-600 dark:text-primary-400\">{{ totalErrors }}</div>\r\n          <div class=\"text-sm text-gray-600 dark:text-gray-400\">Errors</div>\r\n        </div>\r\n        <div \r\n          class=\"bg-gray-50 dark:bg-gray-700 p-4 rounded-xl border border-gray-200 dark:border-gray-600 text-center\"\r\n          v-motion\r\n          :initial=\"{ opacity: 0, x: 20 }\"\r\n          :enter=\"{ opacity: 1, x: 0, transition: { duration: 500, delay: 600 } }\"\r\n        >\r\n          <div class=\"text-2xl font-bold text-primary-600 dark:text-primary-400\">{{ completedPhrases }}</div>\r\n          <div class=\"text-sm text-gray-600 dark:text-gray-400\">Phrases</div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Action Button (only shown when game is complete) -->\r\n      <client-only>\r\n        <div v-if=\"isGameComplete\" class=\"text-center relative\">\r\n          <button \r\n            @click=\"getNewPhrase\"\r\n            class=\"bg-primary-600 hover:bg-primary-700 text-white font-medium py-3 px-8 rounded-xl transition-colors\"\r\n          >\r\n            Try Again\r\n          </button>\r\n        </div>\r\n      </client-only>\r\n    </div>\r\n\r\n    <!-- Best Score -->\r\n    <client-only>\r\n      <div \r\n        v-if=\"bestScore\" \r\n        class=\"bg-white dark:bg-gray-800 rounded-2xl shadow-md border border-gray-200 dark:border-gray-700 p-6 mb-6\"\r\n        v-motion\r\n        :initial=\"{ opacity: 0, y: 40 }\"\r\n        :enter=\"{ opacity: 1, y: 0, transition: { duration: 600, delay: 600 } }\"\r\n        :triggers=\"[bestScore]\"\r\n      >\r\n\r\n        <h2 \r\n          class=\"text-xl font-bold text-gray-800 dark:text-white mb-4 relative\"\r\n          v-motion\r\n          :initial=\"{ x: -20, opacity: 0 }\"\r\n          :enter=\"{ x: 0, opacity: 1, transition: { duration: 400, delay: 700 } }\"\r\n        >Your Best Score</h2>\r\n        <div class=\"grid grid-cols-4 gap-4 relative\">\r\n          <div \r\n            class=\"bg-gray-50 dark:bg-gray-700 p-4 rounded-xl border border-gray-200 dark:border-gray-600 text-center\"\r\n            v-motion\r\n            :initial=\"{ scale: 0.8, opacity: 0 }\"\r\n            :enter=\"{ scale: 1, opacity: 1, transition: { duration: 400, delay: 800 } }\"\r\n          >\r\n            <div class=\"text-2xl font-bold text-primary-600 dark:text-primary-400\">{{ bestScore.wpm }}</div>\r\n            <div class=\"text-sm text-gray-600 dark:text-gray-400\">WPM</div>\r\n          </div>\r\n          <div \r\n            class=\"bg-gray-50 dark:bg-gray-700 p-4 rounded-xl border border-gray-200 dark:border-gray-600 text-center\"\r\n            v-motion\r\n            :initial=\"{ scale: 0.8, opacity: 0 }\"\r\n            :enter=\"{ scale: 1, opacity: 1, transition: { duration: 400, delay: 900 } }\"\r\n          >\r\n            <div class=\"text-2xl font-bold text-primary-600 dark:text-primary-400\">{{ bestScore.accuracy }}%</div>\r\n            <div class=\"text-sm text-gray-600 dark:text-gray-400\">Accuracy</div>\r\n          </div>\r\n          <div \r\n            class=\"bg-gray-50 dark:bg-gray-700 p-4 rounded-xl border border-gray-200 dark:border-gray-600 text-center\"\r\n            v-motion\r\n            :initial=\"{ scale: 0.8, opacity: 0 }\"\r\n            :enter=\"{ scale: 1, opacity: 1, transition: { duration: 400, delay: 1000 } }\"\r\n          >\r\n            <div class=\"text-2xl font-bold text-primary-600 dark:text-primary-400\">{{ bestScore.errors }}</div>\r\n            <div class=\"text-sm text-gray-600 dark:text-gray-400\">Errors</div>\r\n          </div>\r\n          <div \r\n            class=\"bg-gray-50 dark:bg-gray-700 p-4 rounded-xl border border-gray-200 dark:border-gray-600 text-center\"\r\n            v-motion\r\n            :initial=\"{ scale: 0.8, opacity: 0 }\"\r\n            :enter=\"{ scale: 1, opacity: 1, transition: { duration: 400, delay: 1100 } }\"\r\n          >\r\n            <div class=\"text-2xl font-bold text-primary-600 dark:text-primary-400\">{{ bestScore.completedPhrases || 0 }}</div>\r\n            <div class=\"text-sm text-gray-600 dark:text-gray-400\">Phrases</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </client-only>\r\n\r\n    <!-- Results Modal -->\r\n    <client-only>\r\n      <div \r\n        v-if=\"isGameComplete\" \r\n        class=\"fixed inset-0 bg-black/50 flex items-center justify-center p-4 z-50\"\r\n        v-motion\r\n        :initial=\"{ opacity: 0 }\"\r\n        :enter=\"{ opacity: 1, transition: { duration: 300 } }\"\r\n        :leave=\"{ opacity: 0, transition: { duration: 200 } }\"\r\n      >\r\n        <div \r\n          class=\"bg-white dark:bg-gray-800 rounded-xl shadow-lg border border-gray-200 dark:border-gray-700 max-w-md w-full p-6\"\r\n          v-motion\r\n          :initial=\"{ scale: 0.9, opacity: 0 }\"\r\n          :enter=\"{ scale: 1, opacity: 1, transition: { type: 'spring', stiffness: 300, damping: 20 } }\"\r\n          :leave=\"{ scale: 0.9, opacity: 0, transition: { duration: 200 } }\"\r\n        >\r\n\r\n          <div \r\n            class=\"text-center mb-6 relative\"\r\n            v-motion\r\n            :initial=\"{ y: -20, opacity: 0 }\"\r\n            :enter=\"{ y: 0, opacity: 1, transition: { duration: 400, delay: 100 } }\"\r\n          >\r\n            <h2 class=\"text-2xl font-bold text-gray-900 dark:text-white mb-2\">Your Results</h2>\r\n            <p class=\"text-gray-600 dark:text-gray-400\">\r\n              {{ wpm > 40 ? 'Great job!' : 'Keep practicing!' }}\r\n            </p>\r\n          </div>\r\n\r\n          <div class=\"grid grid-cols-4 gap-4 mb-6 relative\">\r\n            <div \r\n              class=\"bg-gray-50 dark:bg-gray-700 p-4 rounded-xl border border-gray-200 dark:border-gray-600 text-center\"\r\n              v-motion\r\n              :initial=\"{ scale: 0.8, opacity: 0 }\"\r\n              :enter=\"{ scale: 1, opacity: 1, transition: { duration: 400, delay: 200 } }\"\r\n            >\r\n              <div class=\"text-3xl font-bold text-primary-600 dark:text-primary-400\">{{ wpm }}</div>\r\n              <div class=\"text-sm text-gray-600 dark:text-gray-400\">WPM</div>\r\n            </div>\r\n            <div \r\n              class=\"bg-gray-50 dark:bg-gray-700 p-4 rounded-xl border border-gray-200 dark:border-gray-600 text-center\"\r\n              v-motion\r\n              :initial=\"{ scale: 0.8, opacity: 0 }\"\r\n              :enter=\"{ scale: 1, opacity: 1, transition: { duration: 400, delay: 300 } }\"\r\n            >\r\n              <div class=\"text-3xl font-bold text-primary-600 dark:text-primary-400\">{{ accuracy }}%</div>\r\n              <div class=\"text-sm text-gray-600 dark:text-gray-400\">Accuracy</div>\r\n            </div>\r\n            <div \r\n              class=\"bg-gray-50 dark:bg-gray-700 p-4 rounded-xl border border-gray-200 dark:border-gray-600 text-center\"\r\n              v-motion\r\n              :initial=\"{ scale: 0.8, opacity: 0 }\"\r\n              :enter=\"{ scale: 1, opacity: 1, transition: { duration: 400, delay: 400 } }\"\r\n            >\r\n              <div class=\"text-3xl font-bold text-primary-600 dark:text-primary-400\">{{ totalErrors }}</div>\r\n              <div class=\"text-sm text-gray-600 dark:text-gray-400\">Errors</div>\r\n            </div>\r\n            <div \r\n              class=\"bg-gray-50 dark:bg-gray-700 p-4 rounded-xl border border-gray-200 dark:border-gray-600 text-center\"\r\n              v-motion\r\n              :initial=\"{ scale: 0.8, opacity: 0 }\"\r\n              :enter=\"{ scale: 1, opacity: 1, transition: { duration: 400, delay: 500 } }\"\r\n            >\r\n              <div class=\"text-3xl font-bold text-primary-600 dark:text-primary-400\">{{ completedPhrases }}</div>\r\n              <div class=\"text-sm text-gray-600 dark:text-gray-400\">Phrases</div>\r\n            </div>\r\n          </div>\r\n\r\n          <!-- Authentication-dependent content -->\r\n          <!-- Authenticated User -->\r\n          <div \r\n            v-if=\"isAuthenticated\"\r\n            class=\"mb-6 relative\"\r\n            v-motion\r\n            :initial=\"{ y: 20, opacity: 0 }\"\r\n            :enter=\"{ y: 0, opacity: 1, transition: { duration: 400, delay: 500 } }\"\r\n          >\r\n            <p class=\"text-gray-700 dark:text-gray-300 mb-4\">\r\n              Your score has been automatically saved to your account.\r\n            </p>\r\n\r\n            <div \r\n              class=\"flex justify-center\"\r\n              v-motion\r\n              :initial=\"{ y: 20, opacity: 0 }\"\r\n              :enter=\"{ y: 0, opacity: 1, transition: { duration: 400, delay: 600 } }\"\r\n            >\r\n              <button \r\n                @click=\"getNewPhrase\"\r\n                class=\"bg-primary-600 hover:bg-primary-700 text-white font-medium py-3 px-8 rounded-xl transition-colors\"\r\n              >\r\n                Try Again\r\n              </button>\r\n            </div>\r\n          </div>\r\n\r\n          <!-- Anonymous User -->\r\n          <div v-else>\r\n            <div \r\n              class=\"mb-6 relative\"\r\n              v-motion\r\n              :initial=\"{ y: 20, opacity: 0 }\"\r\n              :enter=\"{ y: 0, opacity: 1, transition: { duration: 400, delay: 500 } }\"\r\n            >\r\n              <p v-if=\"playerName.trim()\" class=\"text-gray-700 dark:text-gray-300 mb-4\">\r\n                Your score has been automatically saved as \"{{ playerName.trim() }}\".\r\n              </p>\r\n              <template v-else>\r\n                <label class=\"block text-gray-700 dark:text-gray-300 mb-2\">Save your score:</label>\r\n                <input\r\n                  v-model=\"playerName\"\r\n                  type=\"text\"\r\n                  class=\"w-full p-4 border border-gray-300 dark:border-gray-600 rounded-xl bg-white dark:bg-gray-700 text-gray-800 dark:text-white focus:outline-none focus:ring-2 focus:ring-primary-500\"\r\n                  placeholder=\"Enter your name\"\r\n                  @keyup.enter=\"saveAnonymousScore\"\r\n                />\r\n                <p class=\"mt-2 text-sm text-gray-600 dark:text-gray-400\">\r\n                  <NuxtLink to=\"/login\" class=\"text-primary-600 hover:text-primary-700 dark:text-primary-400 dark:hover:text-primary-300\">\r\n                    Log in\r\n                  </NuxtLink> \r\n                  or \r\n                  <NuxtLink to=\"/register\" class=\"text-primary-600 hover:text-primary-700 dark:text-primary-400 dark:hover:text-primary-300\">\r\n                    register\r\n                  </NuxtLink> \r\n                  to track your progress and appear on the leaderboard!\r\n                </p>\r\n              </template>\r\n            </div>\r\n\r\n            <div \r\n              class=\"flex space-x-4 relative\"\r\n              v-motion\r\n              :initial=\"{ y: 20, opacity: 0 }\"\r\n              :enter=\"{ y: 0, opacity: 1, transition: { duration: 400, delay: 600 } }\"\r\n            >\r\n              <button \r\n                v-if=\"!playerName.trim()\"\r\n                @click=\"saveAnonymousScore\"\r\n                class=\"flex-1 bg-primary-600 hover:bg-primary-700 text-white font-medium py-3 px-4 rounded-xl transition-colors\"\r\n                :disabled=\"loading || !playerName.trim()\"\r\n              >\r\n                {{ loading ? 'Saving...' : 'Save Score' }}\r\n              </button>\r\n              <button \r\n                @click=\"getNewPhrase\"\r\n                :class=\"[\r\n                  playerName.trim() ? 'bg-primary-600 hover:bg-primary-700 text-white' : 'bg-gray-200 hover:bg-gray-300 dark:bg-gray-700 dark:hover:bg-gray-600 text-gray-800 dark:text-white',\r\n                  'flex-1 font-medium py-3 px-4 rounded-xl transition-colors'\r\n                ]\"\r\n              >\r\n                Try Again\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </client-only>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, onMounted } from 'vue';\r\nimport { useTypingGame } from '../composables/useTypingGame.js';\r\nimport { useAuth } from '../composables/useAuth';\r\nimport {useApi} from '../composables/useApi.js';\r\n\r\n// Define page metadata for SEO\r\ndefinePageMeta({\r\n  title: 'TypingRush - Improve Your Typing Speed',\r\n  description: 'Practice typing and improve your speed and accuracy with TypingRush'\r\n});\r\n\r\n// Initialize composables\r\nconst { \r\n  phrase, \r\n  userInput, \r\n  isGameActive, \r\n  isGameComplete, \r\n  errors, \r\n  wpm, \r\n  accuracy, \r\n  charStatus, \r\n  bestScore,\r\n  completedPhrases,\r\n  totalErrors,\r\n  timeRemaining,\r\n  formattedTimeRemaining,\r\n  setPhrase, \r\n  resetGame,\r\n  completePhrase,\r\n  onPhraseCompleted\r\n} = useTypingGame();\r\n\r\nconst { loading, error, getRandomPhrase, saveScore } = useApi();\r\nconst { user, isAuthenticated } = useAuth();\r\n\r\n// Player name for saving score\r\nconst playerName = ref('');\r\n\r\n// Store previously used phrases to avoid repetition\r\nconst usedPhrases = ref([]);\r\n\r\n// Watch for phrase completion to get a new phrase\r\nwatch(userInput, async (newValue, oldValue) => {\r\n  // Start the game when the user begins typing\r\n  if (newValue.length === 1 && oldValue.length === 0 && !isGameActive.value) {\r\n    startTimer();\r\n  }\r\n});\r\n\r\n// Watch for game completion to automatically save score\r\nwatch(isGameComplete, async (newValue, oldValue) => {\r\n  if (newValue === true && !oldValue) {\r\n    // Game has just completed\r\n    if (isAuthenticated.value) {\r\n      // Automatically save score for authenticated users\r\n      await saveAuthenticatedScore();\r\n    } else if (playerName.value.trim()) {\r\n      // Automatically save score for anonymous users with a name\r\n      await saveAnonymousScore();\r\n    }\r\n    // For anonymous users without a name, the modal will prompt them to enter a name\r\n  }\r\n});\r\n\r\n// Fetch a new phrase from the API\r\nasync function getNewPhrase() {\r\n  try {\r\n    // Close the results modal if it's open\r\n    if (isGameComplete.value) {\r\n      resetGame();\r\n    }\r\n    \r\n    // Add current phrase to used phrases if it exists\r\n    if (phrase.value && phrase.value.trim() !== '') {\r\n      if (!usedPhrases.value.includes(phrase.value)) {\r\n        usedPhrases.value.push(phrase.value);\r\n      }\r\n    }\r\n    \r\n    // If we've used too many phrases, clear some older ones\r\n    const MAX_HISTORY = 20; // Keep track of last 20 phrases at most\r\n    if (usedPhrases.value.length > MAX_HISTORY) {\r\n      // Remove oldest phrases but keep the most recent ones\r\n      usedPhrases.value = usedPhrases.value.slice(-MAX_HISTORY);\r\n    }\r\n    \r\n    let data = await getRandomPhrase();\r\n    if (data && data.text) {\r\n      let attempts = 0;\r\n      const maxAttempts = 15; // Increase max attempts to find a new phrase\r\n      \r\n      // Try to get a phrase that hasn't been used recently\r\n      while (usedPhrases.value.includes(data.text) && attempts < maxAttempts) {\r\n        attempts++;\r\n        data = await getRandomPhrase();\r\n        \r\n        // If we've tried many times and still getting used phrases,\r\n        // it might mean we've gone through all available phrases\r\n        if (attempts >= maxAttempts - 1) {\r\n          usedPhrases.value = []; // Reset used phrases if we can't find new ones\r\n          break;\r\n        }\r\n      }\r\n      \r\n      setPhrase(data.text);\r\n    }\r\n  } catch (err) {\r\n    // Error handling is kept silent as requested\r\n  }\r\n}\r\n\r\n// Save the authenticated user's score\r\nasync function saveAuthenticatedScore() {\r\n  try {\r\n    await saveScore({\r\n      name: user.value.username,\r\n      wpm: wpm.value,\r\n      accuracy: accuracy.value,\r\n      errors: totalErrors.value,\r\n      completedPhrases: completedPhrases.value\r\n    });\r\n\r\n    // Close modal and reset game\r\n    resetGame();\r\n    usedPhrases.value = []; // Reset phrase history\r\n    getNewPhrase();\r\n  } catch (err) {\r\n    // Error handling is kept silent as requested\r\n  }\r\n}\r\n\r\n// Save an anonymous user's score\r\nasync function saveAnonymousScore() {\r\n  if (!playerName.value.trim()) {\r\n    alert('Please enter your name');\r\n    return;\r\n  }\r\n\r\n  try {\r\n    await saveScore({\r\n      name: playerName.value.trim(),\r\n      wpm: wpm.value,\r\n      accuracy: accuracy.value,\r\n      errors: totalErrors.value,\r\n      completedPhrases: completedPhrases.value\r\n    });\r\n\r\n    // Close modal and reset game\r\n    resetGame();\r\n    usedPhrases.value = []; // Reset phrase history\r\n    getNewPhrase();\r\n  } catch (err) {\r\n    // Error handling is kept silent as requested\r\n  }\r\n}\r\n\r\n// Set up the callback to get a new phrase when a phrase is completed\r\nonPhraseCompleted.value = async () => {\r\n  await getNewPhrase();\r\n};\r\n\r\n// Initialize the game with a phrase\r\nonMounted(() => {\r\n  resetGame();\r\n  usedPhrases.value = []; // Reset phrase history on initial load\r\n  getNewPhrase();\r\n});\r\n</script>\r\n"],"version":3}