{"version":3,"file":"_id_-ftFgoA3O.js","sources":["../../../../pages/chat/[id].vue"],"sourcesContent":["<template>\r\n  <div class=\"container mx-auto px-4 py-8\">\r\n    <div class=\"bg-glass-light dark:bg-glass-dark backdrop-blur-md rounded-xl shadow-glass overflow-hidden\">\r\n      <!-- Chat Header -->\r\n      <div class=\"p-4 border-b border-gray-200 dark:border-gray-700 flex items-center justify-between\">\r\n        <div class=\"flex items-center\">\r\n          <NuxtLink to=\"/friends\" class=\"mr-4 text-gray-600 dark:text-gray-300 hover:text-primary-600 dark:hover:text-primary-400\">\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n              <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M10 19l-7-7m0 0l7-7m-7 7h18\" />\r\n            </svg>\r\n          </NuxtLink>\r\n          \r\n          <div v-if=\"friend\" class=\"flex items-center\">\r\n            <div class=\"relative\">\r\n              <img :src=\"getProfilePictureUrl(friend)\" alt=\"Profile\" class=\"w-10 h-10 rounded-full object-cover\">\r\n              <span class=\"absolute bottom-0 right-0 w-3 h-3 rounded-full\"\r\n                    :class=\"{\r\n                      'bg-green-500': onlineFriends.get(friend._id) === 'online',\r\n                      'bg-yellow-500': onlineFriends.get(friend._id) === 'away',\r\n                      'bg-gray-500': !onlineFriends.get(friend._id) || onlineFriends.get(friend._id) === 'offline'\r\n                    }\">\r\n              </span>\r\n            </div>\r\n            <div class=\"ml-3\">\r\n              <h2 class=\"text-lg font-semibold text-gray-800 dark:text-white\">{{ friend.username }}</h2>\r\n              <p class=\"text-xs text-gray-500 dark:text-gray-400\">\r\n                {{ onlineFriends.get(friend._id) === 'online' ? 'Online' : \r\n                   onlineFriends.get(friend._id) === 'away' ? 'Away' : \r\n                   'Last seen ' + formatLastSeen(friend.lastSeen) }}\r\n              </p>\r\n            </div>\r\n          </div>\r\n          \r\n          <div v-else class=\"flex items-center\">\r\n            <div class=\"h-10 w-10 rounded-full bg-gray-200 dark:bg-gray-700 animate-pulse\"></div>\r\n            <div class=\"ml-3\">\r\n              <div class=\"h-5 w-24 bg-gray-200 dark:bg-gray-700 rounded animate-pulse\"></div>\r\n              <div class=\"h-3 w-16 bg-gray-200 dark:bg-gray-700 rounded mt-1 animate-pulse\"></div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n      <!-- Chat Messages -->\r\n      <div ref=\"messagesContainer\" class=\"p-4 h-[calc(100vh-250px)] sm:h-[calc(100vh-220px)] md:h-[calc(100vh-200px)] overflow-y-auto\" @scroll=\"handleScroll\">\r\n        <div v-if=\"loading\" class=\"flex justify-center py-4\">\r\n          <div class=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary-600\"></div>\r\n        </div>\r\n        \r\n        <div v-else-if=\"chatMessages.length === 0\" class=\"flex flex-col items-center justify-center h-full text-gray-500 dark:text-gray-400\">\r\n          <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-12 w-12 mb-2\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z\" />\r\n          </svg>\r\n          <p>No messages yet. Start the conversation!</p>\r\n        </div>\r\n        \r\n        <div v-else class=\"space-y-4\">\r\n          <div v-for=\"(message, index) in chatMessages\" :key=\"message._id || index\" \r\n               @click=\"() => console.log('Message:', message, 'Sender:', message.sender, 'userId:', userId.value, 'Equal?', message.sender === userId.value)\"\r\n               :class=\"[\r\n                 'max-w-[90%] sm:max-w-[75%] rounded-lg p-2 sm:p-3 text-sm sm:text-base', \r\n                 isCurrentUserSender(message) ? \r\n                   'ml-auto bg-primary-600 text-white rounded-br-none' : \r\n                   'bg-white dark:bg-gray-700 text-gray-800 dark:text-white rounded-bl-none'\r\n               ]\">\r\n            <p>{{ message.content }}</p>\r\n            <p :class=\"[\r\n                 'text-xs mt-1', \r\n                 isCurrentUserSender(message) ? \r\n                   'text-primary-200' : \r\n                   'text-gray-500 dark:text-gray-400'\r\n               ]\">\r\n              {{ formatTime(message.createdAt) }}\r\n              <span v-if=\"isCurrentUserSender(message)\" class=\"ml-1\">\r\n                {{ message.read ? 'â€¢ Read' : '' }}\r\n              </span>\r\n            </p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n      <!-- Chat Input -->\r\n      <div class=\"p-4 border-t border-gray-200 dark:border-gray-700\">\r\n        <form @submit.prevent=\"sendMessage\" class=\"flex items-center\">\r\n          <input \r\n            v-model=\"newMessage\" \r\n            type=\"text\" \r\n            placeholder=\"Type a message...\" \r\n            class=\"flex-1 px-3 sm:px-4 py-2 text-sm sm:text-base bg-white/70 dark:bg-gray-800/70 border border-gray-300 dark:border-gray-700 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-600 dark:focus:ring-primary-500\"\r\n            :disabled=\"!friend\"\r\n          >\r\n          <button \r\n            type=\"submit\" \r\n            class=\"ml-2 px-3 sm:px-4 py-2 bg-primary-600 hover:bg-primary-700 text-white rounded-lg transition-colors text-sm sm:text-base\"\r\n            :disabled=\"!newMessage.trim() || !friend\"\r\n          >\r\n            Send\r\n          </button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, onMounted, onUnmounted, watch, nextTick } from 'vue';\r\nimport { useRoute } from 'vue-router';\r\nimport { useApi } from '~/composables/useApi';\r\nimport { useSocket } from '~/composables/useSocket';\r\nimport { useAuth } from '~/composables/useAuth';\r\nimport { useToast } from 'vue-toastification';\r\n\r\nconst route = useRoute();\r\nconst toast = useToast();\r\nconst { user } = useAuth();\r\nconst userId = ref(user.value?._id);\r\n\r\n// Ensure userId is set when user changes\r\nwatch(() => user.value, (newUser) => {\r\n  if (newUser && newUser._id) {\r\n    console.log('User updated, setting userId to:', newUser._id);\r\n    userId.value = newUser._id;\r\n  }\r\n});\r\n\r\nconst { \r\n  loading: apiLoading, \r\n  error: apiError,\r\n  getUserProfile,\r\n  getChatMessages,\r\n  sendMessage: apiSendMessage,\r\n  getProfilePictureUrl,\r\n  getFriendsList\r\n} = useApi();\r\n\r\nconst {\r\n  socket,\r\n  isConnected,\r\n  isAuthenticated: socketAuthenticated,\r\n  onlineFriends,\r\n  messages: socketMessages,\r\n  sendPrivateMessage,\r\n  setCurrentChat\r\n} = useSocket();\r\n\r\n// State\r\nconst friendId = ref(route.params.id);\r\nconst friend = ref(null);\r\nconst chatMessages = ref([]);\r\nconst newMessage = ref('');\r\nconst loading = ref(true);\r\nconst messagesContainer = ref(null);\r\nconst isScrolledToBottom = ref(true);\r\n\r\n// Debug current user ID\r\nconsole.log('Current user ID:', userId.value);\r\n\r\n// Load friend profile and chat messages\r\nonMounted(async () => {\r\n  console.log('Component mounted, userId:', userId.value);\r\n  \r\n  if (friendId.value) {\r\n    await loadFriendProfile();\r\n    await loadChatMessages();\r\n    \r\n    // Set current chat in socket\r\n    setCurrentChat(friendId.value);\r\n  }\r\n});\r\n\r\n// Watch for new messages from socket\r\nwatch(() => socketMessages.value.get(friendId.value), (newMessages) => {\r\n  if (newMessages) {\r\n    chatMessages.value = [...newMessages];\r\n    scrollToBottomIfNeeded();\r\n  }\r\n}, { deep: true });\r\n\r\n// Load friend profile\r\nasync function loadFriendProfile() {\r\n  try {\r\n    // Get the friends list\r\n    const friendsList = await getFriendsList();\r\n    \r\n    // Find the specific friend by ID\r\n    const foundFriend = friendsList.find(f => f._id === friendId.value);\r\n    \r\n    if (foundFriend) {\r\n      // Use the friend's actual data\r\n      friend.value = foundFriend;\r\n    } else {\r\n      // If friend not found in the list, show an error\r\n      toast.error('Friend not found');\r\n      console.error('Friend not found in friends list');\r\n    }\r\n  } catch (err) {\r\n    toast.error('Failed to load friend profile');\r\n    console.error(err);\r\n  }\r\n}\r\n\r\n// Load chat messages\r\nasync function loadChatMessages() {\r\n  loading.value = true;\r\n  \r\n  try {\r\n    const messages = await getChatMessages(friendId.value);\r\n    console.log('Messages from API:', messages);\r\n    \r\n    if (messages && messages.length > 0) {\r\n      // Log the first message to check its format\r\n      console.log('First message:', messages[0]);\r\n      console.log('First message sender:', messages[0].sender);\r\n      console.log('First message sender type:', typeof messages[0].sender);\r\n      console.log('userId type:', typeof userId.value);\r\n      console.log('userId === first message sender?', userId.value === messages[0].sender);\r\n    }\r\n    \r\n    chatMessages.value = messages;\r\n    \r\n    // Scroll to bottom after messages load\r\n    await nextTick();\r\n    scrollToBottom();\r\n  } catch (err) {\r\n    toast.error('Failed to load chat messages');\r\n    console.error(err);\r\n  } finally {\r\n    loading.value = false;\r\n  }\r\n}\r\n\r\n// Send a message\r\nasync function sendMessage() {\r\n  if (!newMessage.value.trim() || !friendId.value) return;\r\n  \r\n  const messageContent = newMessage.value;\r\n  newMessage.value = ''; // Clear input immediately for better UX\r\n  \r\n  try {\r\n    // Try to send via socket for real-time delivery\r\n    const socketSuccess = sendPrivateMessage(friendId.value, messageContent);\r\n    \r\n    // Only use API as fallback if socket fails\r\n    if (!socketSuccess) {\r\n      await apiSendMessage(friendId.value, messageContent);\r\n    }\r\n    \r\n    // Scroll to bottom after sending\r\n    await nextTick();\r\n    scrollToBottom();\r\n  } catch (err) {\r\n    toast.error('Failed to send message');\r\n    console.error(err);\r\n  }\r\n}\r\n\r\n// Format time for display\r\nfunction formatTime(timestamp) {\r\n  if (!timestamp) return '';\r\n  \r\n  const date = new Date(timestamp);\r\n  return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\r\n}\r\n\r\n// Format last seen time\r\nfunction formatLastSeen(timestamp) {\r\n  if (!timestamp) return 'a while ago';\r\n  \r\n  const date = new Date(timestamp);\r\n  const now = new Date();\r\n  const diffMs = now - date;\r\n  const diffMins = Math.floor(diffMs / 60000);\r\n  \r\n  if (diffMins < 1) return 'just now';\r\n  if (diffMins < 60) return `${diffMins} minute${diffMins === 1 ? '' : 's'} ago`;\r\n  \r\n  const diffHours = Math.floor(diffMins / 60);\r\n  if (diffHours < 24) return `${diffHours} hour${diffHours === 1 ? '' : 's'} ago`;\r\n  \r\n  const diffDays = Math.floor(diffHours / 24);\r\n  if (diffDays < 7) return `${diffDays} day${diffDays === 1 ? '' : 's'} ago`;\r\n  \r\n  return date.toLocaleDateString();\r\n}\r\n\r\n// Scroll to bottom of messages\r\nfunction scrollToBottom() {\r\n  if (messagesContainer.value) {\r\n    messagesContainer.value.scrollTop = messagesContainer.value.scrollHeight;\r\n  }\r\n}\r\n\r\n// Scroll to bottom only if already at bottom\r\nfunction scrollToBottomIfNeeded() {\r\n  if (isScrolledToBottom.value) {\r\n    nextTick(() => {\r\n      scrollToBottom();\r\n    });\r\n  }\r\n}\r\n\r\n// Handle scroll to detect if user is at bottom\r\nfunction handleScroll() {\r\n  if (messagesContainer.value) {\r\n    const { scrollTop, scrollHeight, clientHeight } = messagesContainer.value;\r\n    isScrolledToBottom.value = scrollTop + clientHeight >= scrollHeight - 10;\r\n  }\r\n}\r\n\r\n// Check if current user is the sender of a message\r\nfunction isCurrentUserSender(message) {\r\n  // Convert both to strings to ensure consistent comparison\r\n  const userIdStr = String(userId.value);\r\n  const senderStr = String(message.sender);\r\n  return userIdStr === senderStr;\r\n}\r\n\r\n// Clean up on unmount\r\nonUnmounted(() => {\r\n  // Clear current chat in socket\r\n  setCurrentChat(null);\r\n});\r\n</script>"],"names":["_ssrRenderAttrs","_mergeProps","_push","_parent","_createBlock","_createVNode","_unref","_ssrInterpolate"],"mappings":"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"}